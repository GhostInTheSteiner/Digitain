{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/ts/Code/Controller.ts","source/ts/Code/View/Classes/RainCharacter.ts","source/ts/Code/View/Classes/RainString.ts","source/ts/Code/View/Classes/RainView.ts","source/ts/Code/View/View.ts","source/ts/Main.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","digitalRain","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","View_1","Controller","view","default","StartAnimation","RainCharacter","character","lifeTimeCycles","fadeOutLevel","_visible","_opacity","lifeTimeCyclesRemaining","Object","defineProperty","prototype","v","_blurStrength","_color","GetNextState","updateObject","toHtmlElement","LightUp","htmlSpanElement","document","createElement","classList","add","textContent","style","textShadow","opacity","toString","visibility","Visible","RainCharacter_1","RainString","stringText","stringDelayStart","stringDelayUpdate","stringDelayUpdateDynamic","characterBlurredCount","characterBlurredStrength","characterFadeCount","characterFadeBegin","init","timeCurrent","Date","getTime","timeInit","timeUpdateLast","htmlDivElement","toHtmlDivElement","hasChildNodes","reInit","rainCharacterArray","Array","currentCharacterIndex","fillString","blurDrop","showNextCharacter","forEach","rainCharacter","appendChild","_this","from","stringChar","push","level","sliceStartIndex","slice","reverse","index","BlurStrength","RainString_1","RainView","stringTextArray","stringDelayStartVariation","rainStringArray","fillView","AddStringArray","textArray","AddString","text","rainString","Math","random","RainView_1","View","rainView","setInterval","updateAnimation","bind","rainViewDiv","getElementById","innerHTML","Controller_1"],"mappings":"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","file":"digital-rain.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import View from \"./View/View\";\nimport Model from \"./Model\";\n\nclass Controller\n{\n    private view: View\n\n    constructor(\n        //private model: Model\n    )\n    {\n        this.view = new View();\n        this.view.StartAnimation();\n    }\n}\n\nexport default Controller","export default class RainCharacter implements IUpdatableHtmlElement\n{\n    private _visible: boolean;\n    private _opacity: number;\n    private _blurStrength: Number;\n    private _color : string;\n    \n    private lifeTimeCyclesRemaining: number\n\n\n    constructor(\n        private character: string,\n        private lifeTimeCycles: number = 30,\n        private fadeOutLevel: number = 0.1\n    )\n    {\n        this._visible = false;\n        this._opacity = 1.0;\n\n        this.lifeTimeCyclesRemaining = this.lifeTimeCycles;\n    }\n\n\n    public get Visible(): boolean\n    {\n        return this._visible;\n    }\n\n    public set Visible(v: boolean)\n    {\n        this._visible = v;\n    }\n\n    public get Opacity(): number\n    {\n        return this._opacity;\n    }\n\n    public set Opacity(v: number)\n    {\n        this._opacity = v;\n    }\n\n    public get BlurStrength(): Number\n    {\n        return this._blurStrength;\n    }\n\n    public set BlurStrength(v: Number)\n    {\n        this._blurStrength = v;\n    }\n\n    public get Color() : string {\n        return this._color;\n    }\n    public set Color(v : string) {\n        this._color = v;\n    }\n\n\n    public GetNextState(): HTMLSpanElement\n    {\n        this.updateObject();\n\n        return this.toHtmlElement();\n    }\n\n\n    public LightUp()\n    {\n        this._visible = true;\n        this._opacity = 1;\n        this.lifeTimeCyclesRemaining = this.lifeTimeCycles;\n    }\n\n    private updateObject(): boolean\n    {\n        if (!this._visible)\n        {\n            //4) Entered always after fade out complete\n            return false\n        }\n        else if(this._opacity < 0.1)\n        {\n            //3) Entered once after fade out complete\n            this._visible = false\n            return true\n        }\n        else if (this.lifeTimeCyclesRemaining < 1)\n        {\n            //2) Entered after no lifetime left\n            this._opacity -= this.fadeOutLevel;\n            return true\n        }\n        else if (this._visible)\n        {\n            if (this.lifeTimeCyclesRemaining == this.lifeTimeCycles)\n                this._color = \"gold\";\n            else\n                this._color = \"green\";\n\n            //1) Entered after set to visible\n            this.lifeTimeCyclesRemaining--;\n            return true\n        }\n    }\n\n\n    private toHtmlElement(): HTMLSpanElement\n    {\n        let htmlSpanElement: HTMLSpanElement = document.createElement(\"span\");\n\n        htmlSpanElement.classList.add(\"rain-character\")\n        htmlSpanElement.textContent = this.character\n\n        htmlSpanElement.style.textShadow = \"0px 0px \" + this._blurStrength + \"px green\";\n        htmlSpanElement.style.opacity = this._opacity.toString();\n        htmlSpanElement.style.visibility =\n            this.Visible ?\n                \"visible\" :\n                \"hidden\"\n\n        return htmlSpanElement;\n    }\n}","import RainCharacter from \"./RainCharacter\";\n\nexport default class RainString implements IUpdatableHtmlElement\n{\n    private rainCharacterArray: Array<RainCharacter>;\n    private currentCharacterIndex: number\n    private timeUpdateLast: number;\n    private timeInit: number;\n\n\n    constructor(\n        private stringText: string,\n        private stringDelayStart: number,\n        private stringDelayUpdate: number,\n        private stringDelayUpdateDynamic: boolean, //Adjust updateDelay to text length\n        private characterBlurredCount: number,\n        private characterBlurredStrength: number,\n        private characterFadeCount: number,\n        private characterFadeBegin: number\n    )\n    {\n        this.init();\n    }\n\n\n    public GetNextState(): HTMLDivElement\n    {\n        let timeCurrent = new Date().getTime();\n\n        if (timeCurrent - this.timeInit < this.stringDelayStart)\n        {\n            //Entered during delayStart time\n            //pass => shouldn't start yet\n        }\n        else if (timeCurrent - this.timeUpdateLast < this.stringDelayUpdate)\n        {\n            //Entered as long as updateDelay not yet reached\n            //pass => shouldn't update yet\n        }\n        else if (!this.updateObject())\n        {\n            //Entered in case all of RainString's characters are shown\n\n            this.init(true); //reinitialize\n\n            //console.log(\"INFO:\\n\\nCode: 'Fall finished.'\\nDescription: 'No more characters to show for RainString:'\\n\");\n            //console.log(this);\n        }\n        else\n        {\n            //Entered after successfull render (rarely)\n\n            let htmlDivElement: HTMLDivElement = this.toHtmlDivElement();\n\n            if (!htmlDivElement.hasChildNodes())\n            {\n                //  console.log(\"WARN:\\n\\nCode: 'No drop.'\\nDescription: 'No RainCharacter in RainString:'\\n\");\n                //console.log(this);\n            }\n\n            this.timeUpdateLast = timeCurrent;\n\n            return htmlDivElement;\n        }\n\n        //Returned whenever no render took place (almost always)\n        return this.toHtmlDivElement()\n    }\n\n    private init(reInit: boolean = false)\n    {\n        if (!reInit) this.rainCharacterArray = new Array<RainCharacter>();\n        this.currentCharacterIndex = 0;\n        this.timeUpdateLast = new Date().getTime();\n        this.timeInit = this.timeUpdateLast;\n\n        if (!reInit) this.fillString();\n    }\n\n    private updateObject(): boolean\n    {\n        this.blurDrop();\n\n        return this.showNextCharacter();\n    }\n\n    private toHtmlDivElement(): HTMLDivElement\n    {\n        let htmlDivElement: HTMLDivElement = document.createElement(\"div\");\n\n        htmlDivElement.classList.add(\"rain-string\")\n\n        this.rainCharacterArray.forEach(rainCharacter =>\n        {\n            htmlDivElement.appendChild(\n                rainCharacter.GetNextState()\n            )\n        })\n\n        return htmlDivElement;\n    }\n\n    private fillString(): void\n    {\n        Array\n            .from(this.stringText)\n            .forEach(stringChar =>\n            {\n                this.rainCharacterArray.push(\n                    new RainCharacter(\n                        stringChar,\n                        this.characterFadeBegin,\n                        1 / this.characterFadeCount\n                    )\n                );\n            });\n    }\n\n    private showNextCharacter(): boolean\n    {\n        if (this.rainCharacterArray.length > this.currentCharacterIndex)\n        {\n            //There still are more characters\n            this.rainCharacterArray[this.currentCharacterIndex].LightUp();\n\n            this.currentCharacterIndex++;\n\n            return true;\n        }\n        else\n        {\n            //No more characters\n            return false;\n        }\n    }\n\n    private blurDrop(): void\n    {\n        let level: number =\n            this.characterBlurredStrength / this.characterBlurredCount;\n\n        let sliceStartIndex: number =\n            this.currentCharacterIndex - this.characterBlurredCount > -1 ?\n                this.currentCharacterIndex - this.characterBlurredCount :\n                0\n\n\n        this.rainCharacterArray\n            .slice(\n                sliceStartIndex,\n                this.currentCharacterIndex\n            )\n            .reverse()\n            .forEach(\n                (rainCharacter, index) =>\n                {\n                    rainCharacter.BlurStrength =\n                        level * (this.characterBlurredCount - index);\n                }\n            )\n    }\n}","import RainString from \"./RainString\";\n\nexport default class RainView implements IUpdatableHtmlElement\n{\n    private rainStringArray: Array<RainString>;\n\n\n    constructor(\n        private stringTextArray: Array<string>,\n        private characterBlurredCount: number = 1,\n        private characterBlurredStrength: number = 5,\n        private characterFadeCount: number = 40,\n        private characterFadeBegin: number = 10,\n        private stringDelayStartVariation: number = 10000,\n        private stringDelayUpdate: number = 100,\n        private stringDelayUpdateDynamic: boolean = true\n    )\n    {\n        this.rainStringArray = new Array<RainString>();\n\n        this.fillView();\n    }\n    \n\n    public AddStringArray(textArray: Array<string>)\n    {\n        //dynamically add string array\n    }\n\n    public AddString(text: string)\n    {\n        //dynamically add string\n    }\n\n    public GetNextState(): HTMLDivElement\n    {\n        return this.toHtmlElement()\n    }\n\n    private toHtmlElement(): HTMLDivElement\n    {\n        let htmlDivElement: HTMLDivElement = document.createElement(\"div\");\n\n        htmlDivElement.classList.add(\"rain-view\")\n\n        this.rainStringArray.forEach(rainString =>\n        {\n            htmlDivElement.appendChild(\n                rainString.GetNextState()\n            )\n        })\n\n        return htmlDivElement;\n    }\n\n    private fillView(): void\n    {\n        this.stringTextArray.forEach(stringText =>\n        {\n            this.rainStringArray.push(\n                new RainString(\n                    stringText,\n                    Math.random() * this.stringDelayStartVariation,\n                    this.stringDelayUpdate * (Math.random() + 1.0),\n                    this.stringDelayUpdateDynamic,\n                    this.characterBlurredCount,\n                    this.characterBlurredStrength,\n                    this.characterFadeCount,\n                    this.characterFadeBegin\n                )\n            )\n        });\n    }\n}","import RainView from \"./Classes/RainView\";\n\nexport default class View\n{\n    private rainView: RainView;\n\n    constructor()\n    {\n        this.rainView =\n            new RainView(\n                [\n                    \"Striking sucks balls\"\n                    , \"Oh god, just HOW MUCH I hate STRINKING!\"\n                    , \"The incarnation of all evil out there...\"\n                    , \"Why can't we have nice things? Just why!!??\"\n                    , \"I blame half my mistakes on strinking's 'review'\"\n                    , \"Just what the hell - this dev...\"\n                    , \"Can't we please have peace and ban that strike-guy lol\"\n                    , \"plsdontbanmeplsdontbanmeplsdontbanmeplsdontbanme\"\n                    , \"Striking sucks balls\"\n                    , \"Oh god, just HOW MUCH I hate STRINKING!\"\n                    , \"The incarnation of all evil out there...\"\n                    , \"Why can't we have nice things? Just why!!??\"\n                    , \"I blame half my mistakes on strinking's 'review'\"\n                    , \"Just what the hell - this dev...\"\n                    , \"Can't we please have peace and ban that strike-guy lol\"\n                    , \"plsdontbanmeplsdontbanmeplsdontbanmeplsdontbanme\"\n                    , \"Striking sucks balls\"\n                    , \"Oh god, just HOW MUCH I hate STRINKING!\"\n                    , \"The incarnation of all evil out there...\"\n                    , \"Why can't we have nice things? Just why!!??\"\n                    , \"I blame half my mistakes on strinking's 'review'\"\n                    , \"Just what the hell - this dev...\"\n                    , \"Can't we please have peace and ban that strike-guy lol\"\n                    , \"plsdontbanmeplsdontbanmeplsdontbanmeplsdontbanme\"\n                    , \"Striking sucks balls\"\n                    , \"Oh god, just HOW MUCH I hate STRINKING!\"\n                    , \"The incarnation of all evil out there...\"\n                    , \"Why can't we have nice things? Just why!!??\"\n                    , \"I blame half my mistakes on strinking's 'review'\"\n                    , \"Just what the hell - this dev...\"\n                    , \"Can't we please have peace and ban that strike-guy lol\"\n                    , \"plsdontbanmeplsdontbanmeplsdontbanmeplsdontbanme\"\n                    , \"Striking sucks balls\"\n                    , \"Oh god, just HOW MUCH I hate STRINKING!\"\n                    , \"The incarnation of all evil out there...\"\n                    , \"Why can't we have nice things? Just why!!??\"\n                    , \"I blame half my mistakes on strinking's 'review'\"\n                    , \"Just what the hell - this dev...\"\n                ]\n            );\n    }\n\n    public StartAnimation(): void\n    {\n        setInterval(\n            this.updateAnimation.bind(this)\n        )\n    }\n\n    private updateAnimation(): void\n    {\n        let rainViewDiv = document.getElementById(\"rain-view\");\n\n        rainViewDiv.innerHTML = \"\";\n\n        rainViewDiv.appendChild(\n            this.rainView.GetNextState()\n        );\n    }\n}","import Controller from \"./Code/Controller\";\n\nlet controller = new Controller();"]}